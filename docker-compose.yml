version: "3.9"

services:
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_log:/var/log/rabbitmq  
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  finbase-db:
    image: timescale/timescaledb:2.14.2-pg15
    container_name: finbase-db
    environment:
      POSTGRES_PASSWORD: supersecretpassword
      POSTGRES_USER: finbase
      POSTGRES_DB: finbase
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./services/storage-service/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finbase -d finbase"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NOTE: The collector_service runs in parallel to the backfill worker, fetching live data.
  # For isolated backfilling tests, you can temporarily comment out this entire service
  # block to prevent live data from being ingested. This provides a clean environment
  # to test backfill jobs without interference.
  collector_service:
    build:
      context: ./services/collector-yfinance
      dockerfile: Dockerfile
    container_name: collector-service
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      RAW_QUEUE_NAME: raw_data_queue
      FETCH_INTERVAL_SECONDS: 60
      TICKERS: "AAPL,MSFT"
    depends_on:
      rabbitmq:
        condition: service_healthy

  quality_service:
    build:
      context: ./services/quality-service
      dockerfile: Dockerfile
    container_name: quality-service
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      INPUT_QUEUE: raw_data_queue
      VALID_QUEUE: clean_data_queue
      INVALID_QUEUE: invalid_data_queue
      DB_HOST: finbase-db
      DB_PORT: 5432
      DB_NAME: finbase
      DB_USER: finbase
      DB_PASSWORD: supersecretpassword
    depends_on:
      rabbitmq:
        condition: service_healthy
      finbase-db:
        condition: service_healthy

  storage_service:
    build:
      context: ./services/storage-service
      dockerfile: Dockerfile
    container_name: storage-service
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      INPUT_QUEUE: clean_data_queue
      DB_HOST: finbase-db
      DB_PORT: 5432
      DB_NAME: finbase
      DB_USER: finbase
      DB_PASSWORD: supersecretpassword
      BATCH_SIZE: 1
      BATCH_TIMEOUT_SECONDS: 0.1
    depends_on:
      rabbitmq:
        condition: service_healthy
      finbase-db:
        condition: service_healthy

  api-service:
    build:
      context: ./services/api-service
      dockerfile: Dockerfile
    container_name: api-service
    environment:
      DB_HOST: finbase-db
      DB_PORT: 5432
      DB_NAME: finbase
      DB_USER: finbase
      DB_PASSWORD: supersecretpassword
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      RABBITMQ_DATA_EVENTS_EXCHANGE: data_events
      BACKFILL_API_KEY: "FINBASE_ADMIN_KEY_abc123xyz"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    depends_on:
      rabbitmq:
        condition: service_healthy
      finbase-db:
        condition: service_healthy
    ports:
      - "8000:8000"

  frontend_service:
    build:
      context: ./services/frontend-service
      dockerfile: Dockerfile
    container_name: frontend-service
    ports:
      - "8080:80"
    # No depends_on to keep it decoupled; UI will show once Nginx is ready

  admin_frontend:
    build:
      context: ./services/admin-frontend
      dockerfile: Dockerfile
    container_name: admin-frontend
    ports:
      - "8081:80"
    depends_on:
      api-service:
        condition: service_healthy
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  backfill_worker:
    build:
      context: ./services/backfill-worker-service
      dockerfile: Dockerfile
    container_name: backfill-worker-service
    env_file:
      - ./services/backfill-worker-service/.env.backfill
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      BACKFILL_JOBS_QUEUE: backfill_jobs_queue
      RAW_QUEUE_NAME: raw_data_queue
      BACKFILL_INTERVAL: 1m
      CHUNK_MONTHS: 1
      PREFETCH_COUNT: 1
      SLEEP_BETWEEN_CHUNKS_SECONDS: 0.2
      DB_HOST: finbase-db
      DB_PORT: 5432
      DB_NAME: finbase
      DB_USER: finbase
      DB_PASSWORD: supersecretpassword
    depends_on:
      rabbitmq:
        condition: service_healthy
      finbase-db:
        condition: service_healthy
    restart: unless-stopped

volumes:
  db-data:
  rabbitmq_data:
  rabbitmq_log:

